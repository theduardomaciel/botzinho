const Discord = require('discord.js');
const { response } = require('express');
const { toUpperCase } = require('ffmpeg-static');
const mongoose = require('mongoose');

const Guild = require('../../../database/models/GuildConfig');

const execute = async (client, message, args, user) => {

    const guildId = message.guild.id;
    const name = user.username;

    const errorMessage = new Discord.MessageEmbed().setDescription(`Infelizmente ocorreu um erro ao tentar adicionar a pergunta ao banco de dados.`);

    const settings = await Guild.findOne({
        guildId: guildId
    }, (err, guild) => {
        if (err) console.error(err);
        if (!guild) {
            return message.channel.send(new Discord.MessageEmbed().setDescription(`N√£o consegui encontrar as informa√ß√µes do servidor atual.\n**Por favor procure um moderador do servidor para verificar se o servidor foi corretamente cadastrado.**`))
        }
        return;
    })

    const settingsLoaded = await settings;

    if (settings.actualClassInfo.length < 1) {
        try {
            await settingsLoaded.updateOne(
                { actualClassInfo: mongoose.SchemaTypes.Array }
            )
        } catch (error) {
            console.error(error)
        }
        console.log(`Array de pergunta e aula atual foi criada no servidor ${message.guild.name}.`);
    }

    let classId = parseInt(args[0]);
    let questionId = parseInt(args[2])
    const classIdIsNotANumber = isNaN(classId)
    const questionIdIsNotANumber = isNaN(questionId)

    let commandType;
    if (classIdIsNotANumber) {
        commandType = 0;
        classId = settings.actualClassInfo['class'];
    } else {
        commandType = 1;
    }

    // Caso o usu√°rio n√£o v√° inserir nenhum id
    if (commandType === 0 || !args[2]) {
        questionId = settings.actualClassInfo['question'];
    }

    let questionTime = 10;

    if (args[1]) {
        questionTime = parseInt(args[1]);
    }

    const aula = settings.guildClasses[classId]
    
    console.log(questionId);

    let question;
    if (!questionIdIsNotANumber) {
        question = settings.guildQuestions[classId][questionId];
    } else {
        console.error(`N√£o foi poss√≠vel identificar o ID da quest√£o.`);
    }
    //const question = settings.guildQuestions[classId][questionId]

    // Estrutura da pergunta salva no banco de dados:
    // enunciado, attachmentUrl, tipo, resposta, tempo (de resposta)

    const usersThatWereCorrectArray = []

    function EndPublishedQuestion(questionId, totalSize) {
        const usersArray = usersThatWereCorrectArray[questionId]
        const usersThatWereCorrectMessage = new Discord.MessageEmbed()
            .setTitle(`Uopa. **O tempo da quest√£o ${questionId} acabou.**`)
        if (usersArray && usersArray.length > 1) {
            usersThatWereCorrectMessage.setDescription(`Parab√©ns √†s **${totalSize} pessoas** que participaram e aos usu√°rios ${usersArray} que acertaram a quest√£o.`)
        } else if (usersArray && usersArray.length == 1) {
            usersThatWereCorrectMessage.setDescription(`Parab√©ns √†s **${totalSize} pessoas** que participaram e ao usu√°rio ${usersArray} que foi **o √∫nico que acertou a quest√£o.**`)
        } else if (usersArray && usersArray.length == 0) {
            usersThatWereCorrectMessage.setDescription(`Parab√©ns √†s **${totalSize} pessoas** que participaram, mas desta vez n√£o deu certo.
            **Ningu√©m acertou a quest√£o!**`)
        }
        return message.channel.send(usersThatWereCorrectMessage);
    }

    if (args[commandType] === 'list' || args[commandType] === 'lista') {

        const listEmbed = new Discord.MessageEmbed()
        .setColor('#0099ff')
        .setAuthor('Botzinho', 'https://pbs.twimg.com/profile_images/1030607655478415366/LBoC35SF_400x400.jpg', 'https://twitter.com/theduardomaciel')

        // Caso n√£o queira mostrar o t√≠tulo, colocar o t√≠tulo dentro do else
        listEmbed.setTitle(`Quest√µes Cadastradas na aula de ID: ${classId}`);
        if (settings.guildQuestions.length == 0) {
            listEmbed.setDescription(`N√£o h√° nenhuma quest√£o cadastrada nesta aula!`);
        } else if (!settings.guildClasses[classId]) {
            listEmbed.setDescription(`N√£o h√° nenhuma aula cadastrada no servidor com o ID: ${classId}!`)
        } else {
            if (settings.guildQuestions[classId].length == null) {
                return;
            }
            for (let i = 0; i < settings.guildQuestions[classId].length; i++) {
                const iterationQuestion = settings.guildQuestions[classId][i]
                const full = iterationQuestion['enunciado']
                const enunciado = full.substring(0, 25)
                if (iterationQuestion['tipo'] === 'aberta') {
                    listEmbed.addField(`**Repostas Poss√≠veis**: ${iterationQuestion['respostas']}`, 
                    `**${i}.** ${enunciado}...`, true);
                } else {
                    //A: ${question['respostas'][0]} | B: ${question['respostas'][1]} | C: ${question['respostas'][2]} | D: ${question['respostas'][3]} | E: ${question['respostas'][4]} |
                    listEmbed.addField(`**Reposta: **${iterationQuestion['respostas'][5]}`, 
                    `**${i}.** ${enunciado}...`, true);
                }
            }
        }
        try {
            message.channel.send(listEmbed);
        } catch (error) {
            const limitEmbed = new Discord.MessageEmbed()
            .setDescription(`N√£o foi poss√≠vel enviar a lista com as quest√µes desta aula por que h√° muitas quest√µes cadastradas na aula.`)
            message.channel.send(limitEmbed);
        }
        message.delete();
        return;
    } else if (args[commandType] === 'publicar' || args[commandType] === 'publish') {

        // Ap√≥s verificarmos se a array existe (caso n√£o exista, criamos uma) vamos atualiz√°-la com as informa√ß√µes de ID que temos
        await settingsLoaded.updateOne(
            { actualClassInfo: {
                class: classId,
                question: questionId,
            } }
        )

        const questionMessage = new Discord.MessageEmbed()
        const materia = aula['materia']
        questionMessage.setTitle(`QUEST√ÉO DE ${materia.toUpperCase()}:`)
        questionMessage.setDescription(`${questionId}. ${question['enunciado']}`)
        questionMessage.setImage(question['attachment'])
        questionMessage.setAuthor(`${question['tempo']} minuto(s) restantes`)

        if (question['tipo'] === 'aberta') {
            questionMessage.setFooter(`Envie a resposta via DM para o Botzinho atrav√©s do comando: !resposta [resposta].`);
            return message.channel.send(question);
        } else if (question['tipo'] === 'fechada') {
            questionMessage.addFields(
                { name: `A:`, value: question['respostas'][0] },
                { name: `B:`, value: question['respostas'][1] },
                { name: `C:`, value: question['respostas'][2] },
                { name: `D:`, value: question['respostas'][3] },
                { name: `E:`, value: question['respostas'][4] },
            )
            message.channel.send(questionMessage)
            .then(async sentMessage => {
                // √â necess√°rio colocar um ID (que neste caso √© o index/posi√ß√£o da array de usu√°rios na array de usu√°rios geral) em cada objeto de usu√°rios que acertaram, caso mais de uma pergunta seja publicada
                usersThatWereCorrectArray.splice(questionId, 1, [])
                try {
                    await sentMessage.react('üá¶')
                    await sentMessage.react('üáß')
                    await sentMessage.react('üá®')
                    await sentMessage.react('üá©')
                    await sentMessage.react('üá™')
                } catch (error) {
                    console.error('N√£o foi poss√≠vel reagir a algum dos emojis.');
                }
                const filter = (reaction, user) => {
                    return reaction.emoji.name === 'üá¶' 
                    || reaction.emoji.name === 'üáß' 
                    || reaction.emoji.name === 'üá®' 
                    || reaction.emoji.name === 'üá©' 
                    || reaction.emoji.name === 'üá™' && user.id === message.author.id;
                };
                let time = (question['tempo']) * 60000
                console.log(time)

                const usersThatCorrect = usersThatWereCorrectArray[questionId]
                
                function CheckAlternative(alternative, user) {
                    if (question['respostas'][5] === alternative) {
                        // Manter essa verifica√ß√£o antes da inser√ß√£o na array para que ele n√£o detecte o usu√°rio no primeiro clique
                        if (usersThatCorrect.indexOf(user) !== -1) {
                            const index = usersThatCorrect.indexOf(user);
                            usersThatCorrect.splice(index, 1);
                        }
                        usersThatCorrect.push(user);
                    }
                }

                const collector = sentMessage.createReactionCollector(filter, { time: time });
                collector.on('collect', (reaction, user) => {
                    let alternative;
                    switch (reaction.emoji.name) {
                        case 'üá¶':
                            alternative = 'A'
                            CheckAlternative(alternative, user)
                            break;
                        case 'üáß':
                            alternative = 'B'
                            CheckAlternative(alternative, user)
                            break;
                        case 'üá®':
                            alternative = 'C'
                            CheckAlternative(alternative, user)
                            break;
                        case 'üá©':
                            alternative = 'D'
                            CheckAlternative(alternative, user)
                            break;
                        case 'üá™':
                            alternative = 'E'
                            CheckAlternative(alternative, user)
                            break;
                    }
                });
                collector.on('end', collected => {
                    EndPublishedQuestion(questionId, collected.size);
                    collector.stop();
                });
                let update;
                function ReloadMessage() {
                    try {
                        time -= 60000;
                        if (time < 1) {
                            return clearInterval(update);
                        }
                        if (time)
                        questionMessage.setAuthor(`${[time / 60000]} minuto(s) restantes`);
                        sentMessage.edit(questionMessage);
                        console.log(`Atualizando mensagem...`);
                    } catch (error) {
                        console.log(error);
                    }
                }
                update = setInterval(ReloadMessage, 60000)
            })
        }
    } else if (args[commandType] === 'end' || args[commandType] === 'stop') {
        // Caso a aula e a quest√£o n√£o forem informadas que deve ser encerrada, utilizamos as informa√ß√µes de aula e quest√£o atual
        EndPublishedQuestion(usersThatWereCorrectArray[questionId], '(indispon√≠vel)');
    } else if (args[commandType] === 'apagar' || args[commandType] == 'remove' || args[commandType] == 'remover' || args[commandType] == 'deletar' || args[commandType] == 'delete') {
            const confirmDelete = new Discord.MessageEmbed()
            .setTitle(`Deseja prosseguir com a remo√ß√£o da quest√£o com ID: ${questionId}?`)
            .setDescription(`Verifique as informa√ß√µes abaixo e confirme atrav√©s da rea√ß√£o:
            **Informa√ß√µes da Quest√£o:**`)
            confirmDelete.addField(`Enunciado:`, `${questionId}. ${question['enunciado']}`)
            
            confirmDelete.setColor('#ff0000');
            message.channel.send(confirmDelete)
            .then(async sentMessage => {
                try {
                    await sentMessage.react('‚úÖ');
                    await sentMessage.react('‚ùå');
                } catch (error) {
                    console.error('N√£o foi poss√≠vel reagir a algum dos emojis.');
                }

                const filter = (reaction, user) => {
                    return reaction.emoji.name === '‚úÖ' || reaction.emoji.name === '‚ùå' && user.id === message.author.id;
                };
                
                function CancelDeleteRequirement() {
                    sentMessage.delete();
                    message.delete();
                    const remotionCancelled = new Discord.MessageEmbed()
                    .setColor('#FFFF00')
                    .setDescription(`**A remo√ß√£o da quest√£o foi cancelada.**\nPara tentar remover uma quest√£o novamente utilize o comando: \`!quest√£o remove [id da aula] [id da quest√£o]\`.`);
                    return message.channel.send(remotionCancelled);
                }

                const collector = sentMessage.createReactionCollector(filter, { time: 15000 });

                let alreadyConfirmed = false;
                collector.on('collect', (reaction, user) => {
                    if (reaction.emoji.name === '‚úÖ') {
                        RemoveQuestion(questionId);
                        sentMessage.delete();
                    } else {
                        CancelDeleteRequirement();
                    }
                    alreadyConfirmed = true;
                });
                collector.on('end', collected => {
                    if (alreadyConfirmed == false) {
                        CancelDeleteRequirement();
                        collector.stop();
                    }
                });
            })
        /* const wrongArgs = new Discord.MessageEmbed()
        .setDescription(`**O ID da aula informado n√£o √© um n√∫mero. Por favor, revise os dados informados.**`)
        .setColor('ffff00');
        return message.channel.send(wrongArgs); */
    } else {
        if (!settings.guildClasses[classId]) {
            const errorMessage = new Discord.MessageEmbed().setDescription(`N√£o h√° nenhuma aula cadastrada no servidor com o ID: ${classId}!`)
            message.channel.send(errorMessage);
            return message.delete();
        }
        Step1();
    }

    // Primeira Etapa
    // Legenda: 0 = id da aula | 1 = tempo da atividade

    async function CancelCreation() {
        const inactivityMessage = new Discord.MessageEmbed()
        .setDescription('A inser√ß√£o da quest√£o foi cancelada por conta de inatividade. Por favor inicie o processo de cria√ß√£o novamente.')
        message.channel.send(inactivityMessage);
        message.delete();
        return;
    }

    // Passos: 1 = enunciado e anexos | 2 = tipo de pergunta | 3 = respostas, que dependendo do tipo de pergunta √© diferente
    // No caso de quest√£o aberta, o moderador deve inserir at√© 5 respostas para a pergunta
    // No caso de quest√£o fechada, o moderador deve selecionar qual das alternativas de A a E est√° correta

    // Passo 1: inser√ß√£o do enunciado e anexos
    function Step1() {
        const step1 = new Discord.MessageEmbed()
        .setAuthor(`Passo 1 | enunciado e anexos:`)
        .setTitle(`J√° tenho o ID da aula (ID: ${classId}) e o tempo m√°ximo (${questionTime} minuto(s)) de resposta.`)
        .setDescription(`Agora **envie no chat atual o enunciado da quest√£o** e um anexo, caso necess√°rio.`)
        .setColor('#ffff00')
        message.channel.send(step1)
        .then(async step1Message => {
            let alreadyConfirmed = false
            const maxResponseTime = 180000;
            const filter = response => {
                return message.author.id === response.author.id;
            }
            const collector = message.channel.createMessageCollector(filter, { max:1 , time: 100000 });
            collector.on('collect', collectedMessage => {
                alreadyConfirmed = true;
                const enunciado = collectedMessage.content;

                let attachment;
                const attachments = (collectedMessage.attachments).array();
                if (attachments && attachments[0]) {
                    attachment = attachments[0].url;
                }

                Step2(enunciado, attachment);
                step1Message.delete()
            });
            collector.on('end', collected => {
                if (alreadyConfirmed == false) {
                    CancelCreation();
                    collector.stop();
                }
            });
        });
    }

    // Fun√ß√£o de Pergunta aberta para o Passo 2
    async function PerguntaAberta(enunciado, attachmentUrl) {
        let maxResponses = 5;
        let leftResponses = maxResponses;

        const openQuestion = new Discord.MessageEmbed()
        .setAuthor(`Passo 2 | quest√£o aberta:`)
        .setTitle('Digite agora as respostas para a quest√£o aberta inserida.')
        .setDescription(`**Observa√ß√µes:**`)
        .setColor('#ffff00')
        .setDescription(`**Observa√ß√µes:**
            - Comece agora **digitando a primeira resposta poss√≠vel para a pergunta**.
            - Digite uma resposta e aperte ENTER para em seguida inserir outra, com um m√°ximo de ${maxResponses} respostas.`)

        let responses = [];

        let firstMessage = true;
        let alreadyConfirmed = false;

        async function UpdateMessage(messageToEdit) {

            openQuestion.setTitle(`Escreva agora a Resposta ${(maxResponses + 1) - leftResponses}`)
            openQuestion.setDescription(`**Observa√ß√µes:**
            - Reaja com o s√≠mbolo ‚úÖ para concluir a inser√ß√£o de respostas caso n√£o queira inserir o m√°ximo de respostas.
            (ainda podem ser inseridas **${leftResponses}** respostas)`)

            if (firstMessage == true) {
                try {
                    await messageToEdit.react('‚úÖ');
                } catch (error) {
                    console.error('N√£o foi poss√≠vel reagir a algum dos emojis.');
                    messageToEdit.delete();
                    message.channel.send(errorMessage);
                    return;
                }
    
                const reactionFilter = (reaction, user) => {
                    return reaction.emoji.name === '‚úÖ' && user.id === message.author.id;
                };
                const reactionCollector = messageToEdit.createReactionCollector(reactionFilter, { time: 120000 });
                reactionCollector.on('collect', (reaction, user) => {
                    alreadyConfirmed = true
                    CadastrarPergunta(enunciado, attachmentUrl, 'aberta', responses);
                    reactionCollector.stop();
                    return;
                });
            }

            firstMessage = false;
            messageToEdit.edit(openQuestion);

        }

        message.channel.send(openQuestion)
        .then(async sentMessage => {

            const filter = response => {
                return message.author.id === response.author.id;
            }
            const collector = message.channel.createMessageCollector(filter, { time: 120000 });
    
            collector.on('collect', collectedMessage => {
                if (leftResponses > 0) {
                    leftResponses -= 1;
                    responses.push(collectedMessage.content);
                    if (leftResponses < maxResponses) {
                        UpdateMessage(sentMessage);
                    }
                } else {
                    alreadyConfirmed = true;
                    CadastrarPergunta(enunciado, attachmentUrl, 'aberta', responses);
                    return;
                }
            });
            collector.on('end', collected => {
                if (alreadyConfirmed == false) {
                    sentMessage.delete();
                    CancelCreation();
                }
            });  
        }); 

    }

    async function PerguntaFechada(enunciado, attachmentUrl) {
        const closedQuestion = new Discord.MessageEmbed()
        .setAuthor(`Passo 2 | quest√£o fechada:`)
        .setTitle(`Digite o valor de cada uma das letras da quest√£o.`)
        .setDescription(`**Observa√ß√µes:**
        - Os valores de cada alternativa devem ser separado por pontos-e-v√≠rgulas (;), sem espa√ßo entre valores.
        **- Exemplo: 24.5;12.8;14.25;23.4;[valor vazio]**`)
        .setColor('#ffff00')
        message.channel.send(closedQuestion);

        let string = null;

        const filter = response => {
            return message.author.id === response.author.id;
        }
        const collector = message.channel.createMessageCollector(filter, { max:1 });
        collector.on('collect', collectedMessage => {
            const string = collectedMessage.content;
            const responsesTable = string.split(`;`)
            if (responsesTable.length <= 4) {
                responsesTable.push(null);
            }
            console.log(responsesTable)
            ClosedQuestionAnswer(responsesTable);
        });

        async function ClosedQuestionAnswer(responsesTable) {
            let alreadyConfirmed = false;
            const correctAnswer = new Discord.MessageEmbed()
                .setAuthor(`Passo 2 | quest√£o fechada:`)
                .setDescription(`Agora informe qual das alternativas √© a correta.`)
                .setColor('#ffff00')

            message.channel.send(correctAnswer)
            .then(async sentMessage => {
                try {
                    await sentMessage.react('üá¶')
                    await sentMessage.react('üáß')
                    await sentMessage.react('üá®')
                    await sentMessage.react('üá©')
                    await sentMessage.react('üá™')
                } catch (error) {
                    console.error('N√£o foi poss√≠vel reagir a algum dos emojis.');
                }
                const filter = (reaction, user) => {
                    return reaction.emoji.name === 'üá¶' 
                    || reaction.emoji.name === 'üáß' 
                    || reaction.emoji.name === 'üá®' 
                    || reaction.emoji.name === 'üá©' 
                    || reaction.emoji.name === 'üá™' && user.id === message.author.id;
                };
                const collector = sentMessage.createReactionCollector(filter, { time: 15000 });
                collector.on('collect', (reaction, user) => {
                    let alternative = null;
                    switch (reaction.emoji.name) {
                        case 'üá¶':
                            alternative = 'A';
                            break;
                        case 'üáß':
                            alternative = 'B';
                            break;
                        case 'üá®':
                            alternative = 'C';
                            break;
                        case 'üá©':
                            alternative = 'D';
                            break;
                        case 'üá™':
                            alternative = 'E';
                            break;
                        default:
                            alternative = 'Deu errado galera :)';
                            break;
                    }
                    alreadyConfirmed = true
                    sentMessage.delete();
                    responsesTable.push(alternative)
                    console.log(responsesTable);
                    CadastrarPergunta(enunciado, attachmentUrl, 'fechada', responsesTable);
                });
                collector.on('end', collected => {
                    if (alreadyConfirmed == false) {
                        sentMessage.delete();
                        CancelCreation();
                        collector.stop();
                    }
                });
            });
        }
    }

    // Passo 2: tipo de pergunta
    async function Step2(enunciado, attachmentUrl) {
        const step2 = new Discord.MessageEmbed()
        .setAuthor(`Passo 2 | tipo de pergunta:`)
        .setTitle('Agora que j√° tenho a quest√£o salva, qual √© o seu formato?')
        .setDescription(`ABERTA ‚úçÔ∏è ou M√öLTIPLA ESCOLHA ‚≠ï
        (Caso voc√™ tenha inserido a quest√£o de forma errada, clique no √≠cone de voltar ‚Ü©Ô∏è para inseri-la novamente.)`)
        .setColor('#ffff00')
        message.channel.send(step2)
        .then(async step2Message => {
            try {
                await step2Message.react('‚úçÔ∏è');
                await step2Message.react('‚≠ï');
                await step2Message.react('‚Ü©Ô∏è');
            } catch (error) {
                console.error('N√£o foi poss√≠vel reagir a algum dos emojis.');
            }
            const filter = (reaction, user) => {
                return reaction.emoji.name === '‚úçÔ∏è' || reaction.emoji.name === '‚Ü©Ô∏è' || reaction.emoji.name === '‚≠ï' && user.id === message.author.id;
            };

            const collector = step2Message.createReactionCollector(filter, { time: 15000 });
            let alreadyConfirmed = false;
            collector.on('collect', async (reaction, user) => {
                if (reaction.emoji.name === '‚úçÔ∏è') {
                    step2Message.delete();
                    PerguntaAberta(enunciado, attachmentUrl)
                } else if (reaction.emoji.name === '‚≠ï') {
                    step2Message.delete();
                    PerguntaFechada(enunciado, attachmentUrl);
                } else if (reaction.emoji.name === '‚Ü©Ô∏è') {
                    step2Message.delete();
                    Step1();
                }
                alreadyConfirmed = true
            });
            collector.on('end', collected => {
                if (alreadyConfirmed == false) {
                    CancelCreation();
                    collector.stop();
                }
            });

        })
    }

    async function CadastrarPergunta(enunciado, attachmentUrl, tipo, respostas) {

        //let questionsCount = settings.guildQuestions[classId].length

        try {
            await settings.updateOne(
                { $push: { ["guildQuestions." + classId]: {
                    class: classId,
                    enunciado: enunciado,
                    attachment: attachmentUrl,
                    tipo: tipo,
                    respostas: respostas,
                    tempo: questionTime,
                }}}
            )
            const perguntaCriada = new Discord.MessageEmbed()
            .setDescription(`**A quest√£o foi criada e inserida no banco de dados do servidor com sucesso.**\nPara acessar a lista de quest√µes com suas respectivas informa√ß√µes digite: \`!pergunta [id da aula] lista\`.`)
            .setColor('#00FF00');
            message.channel.send(perguntaCriada);
            message.delete();
            return;
        } catch (error) {
            console.error(error);
            message.channel.send(errorMessage);
            return message.delete();
        }
    }

    async function RemoveQuestion(id) {
        try {
            await settings.updateOne(
                { $pull: { ["guildQuestions." + classId]: { class: question['class'], tipo: question['tipo'], enunciado: question['enunciado'] } } }
            )
        } catch (error) {
            console.error(error)
        }
        const questionRemoved = new Discord.MessageEmbed().setDescription(`**A quest√£o foi deletada e removida do banco de dados da aula com sucesso.**\nPara acessar a lista de quest√µes com suas respectivas informa√ß√µes digite: \`!quest√£o [id da aula] lista\`.`);
        return message.channel.send(questionRemoved);
    }

};

module.exports = {
    name: 'pergunta',
    description: `Cria uma pergunta e a adiciona na aula especificada (pelo seu ID) atrav√©s do primeiro argumento do comando. As quest√µes possuem enunciado, podem possuir anexo e podem ser ou abertas ou de m√∫ltipla escolha.\nExemplo: \`!pergunta [ID da aula] [enunciado] [anexo/imagem - opcional]\`\n***Dispon√≠vel somente para moderadores.***`,
	aliases: ['quest√£o', 'question', 'perguntas', 'quest√µes'],
    cooldown: 5,
    guildOnly: true,
    execute,
};